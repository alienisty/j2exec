<!--
/**
 * Copyright (c) 2007-2011 J2Speed. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<project basedir="." default="jar" name="j2exec" xmlns:artifact="antlib:org.apache.maven.artifact.ant">

  <property name="user.dev" location="${user.home}/.dev/${ant.project.name}" />

  <property file="${user.dev}/build.properties" />

  <property name="artifactId" value="${ant.project.name}" />
  <property name="version" value="trunk" />
  <property name="class.level" value="1.6" />

  <property name="src" location="src/main/java" />
  <property name="test.src" location="src/test/java" />
  <property name="build" location="build" />
  <property name="test" location="${build}/test" />
  <property name="lib" location="lib" />

  <property name="test.classes" location="${test}/classes" />
  <property name="build.classes" location="${build}/classes" />
  <property name="cobertura" location="../../cobertura-1.9.4.1" />
  <property name="instrumented" location="${build}/instrumented" />
  <property name="cobertura.data" location="${build}/cobertura.ser" />

  <!-- define artifacts' name, which follows the convention of Maven -->
  <property name="maven-jar" value="${build}/lib/${artifactId}-${version}.jar" />
  <property name="maven-javadoc-jar" value="${build}/lib/${artifactId}-${version}-javadoc.jar" />
  <property name="maven-sources-jar" value="${build}/lib/${artifactId}-${version}-sources.jar" />

  <!-- defined maven snapshots and staging repository id and url -->
  <property name="maven-snapshots-repository-id" value="sonatype-nexus-snapshots" />
  <property name="maven-snapshots-repository-url" value="https://oss.sonatype.org/content/repositories/snapshots/" />
  <property name="maven-staging-repository-id" value="sonatype-nexus-staging" />
  <property name="maven-staging-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />

  <path id="cobertura.classpath">
    <fileset dir="${cobertura}">
      <include name="cobertura.jar" />
      <include name="lib/**/*.jar" />
    </fileset>
  </path>

  <path id="project.classpath">
    <pathelement location="${build.classes}" />
    <pathelement location="${lib}/junit.jar" />
    <pathelement location="${lib}/org.hamcrest.core_1.1.0.jar" />
    <pathelement location="${lib}/annotations.jar" />
    <pathelement location="${lib}/jsr305.jar" />
  </path>

  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

  <target name="jar" depends="build">
    <jar destfile="${build}/${ant.project.name}-${version}.jar">
      <fileset dir="${basedir}">
        <include name="LICENSE.txt" />
      </fileset>
      <fileset dir="${build.classes}">
        <include name="**/*.class" />
      </fileset>
    </jar>
  </target>

  <target name="build" depends="init">      
    <javac destdir="${build.classes}" optimize="true" debug="false" target="${class.level}">
      <src path="src" />
      <classpath refid="project.classpath" />
      <compilerarg value="-Xlint:deprecation" />
    </javac>
  </target>

  <target name="init">
    <mkdir dir="${build}" />
    <mkdir dir="${build.classes}" />
    <mkdir dir="${instrumented}" />
    <mkdir dir="${test}" />
    <mkdir dir="${test.classes}" />
  </target>

  <target name="build-debug" depends="init">
    <javac destdir="${build.classes}" debug="true" target="${class.level}">
      <src path="${src}" />
      <classpath refid="project.classpath" />
    </javac>
  </target>

  <target name="test" depends="clean, build-debug">
    <javac destdir="${test.classes}" debug="true" target="${class.level}">
      <src path="${test.src}" />
      <classpath refid="project.classpath" />
      <compilerarg value="-Xlint:deprecation" />
    </javac>

    <cobertura-instrument todir="${instrumented}" datafile="${cobertura.data}">
      <fileset dir="${build.classes}">
        <include name="**/*.class" />
      </fileset>
    </cobertura-instrument>

    <junit fork="yes" forkmode="once" printsummary="on" dir="${test.classes}">
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data}" />
      <formatter type="xml" />
      <classpath>
        <pathelement location="${instrumented}" />
        <path refid="project.classpath" />
        <pathelement location="${test.classes}" />
        <path refid="cobertura.classpath" />
      </classpath>
      <batchtest todir="${test}">
        <fileset dir="${test.classes}">
          <include name="**/*Test.class" />
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${test}">
      <fileset dir="${test}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${test}/report/html" />
    </junitreport>

    <cobertura-report format="html" 
    	                datafile="${cobertura.data}" 
    	                destdir="${test}/coverage/html" 
    	                srcdir="${src}" />

    <delete>
      <fileset dir="${test}">
        <include name="TEST-*.xml" />
        <include name="TESTS-*.xml" />
      </fileset>
      <fileset dir="${build.classes}">
        <include name="**/*" />
      </fileset>
    </delete>
    <delete dir="${test.classes}" />
    <delete dir="${instrumented}" />
  </target>

  <target name="release" depends="clean, tag-version, test, jar, docs" description="make accessive-xxx.zip">
    <zip destfile="${build}/${ant.project.name}-${version}.zip">
      <zipfileset dir="${basedir}">
        <include name="README.txt" />
        <include name="LICENSE.txt" />
        <include name="build.xml" />
        <include name="${src}" />
        <include name="${test.src}" />
      </zipfileset>
      <zipfileset dir="${build}">
        <include name="${ant.project.name}-${version}.jar" />
        <include name="javadoc/" />
        <include name="${test.src}" />
      </zipfileset>
      <zipfileset dir="${test}">
        <include name="coverage/" />
        <include name="report/" />
      </zipfileset>
    </zip>
    <delete dir="${build.classes}" />
  </target>

  <target name="maven-jar" depends="build,docs">
    <mkdir dir="${build}/lib" />
    <!-- build the main artifact -->
    <jar jarfile="${maven-jar}" basedir="${build.classes}" />

    <!-- build the javadoc artifact -->
    <jar jarfile="${maven-javadoc-jar}">
      <fileset dir="${build}/javadoc" />
    </jar>

    <!-- build the sources artifact -->
    <jar jarfile="${maven-sources-jar}">
      <fileset dir="${src}" />
    </jar>
  </target>

  <target name="maven-deploy" depends="clean,test,maven-jar" description="deploy snapshot version to Maven snapshot repository">
  <artifact:mvn mavenHome="${maven.home}" fork="yes">
    <arg value="org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file" />
    <arg value="-Durl=${maven-snapshots-repository-url}" />
    <arg value="-DrepositoryId=${maven-snapshots-repository-id}" />
    <arg value="-DpomFile=pom.xml" />
    <arg value="-Dfile=${maven-jar}" />
  </artifact:mvn>
  </target>

  <!-- before this, update project version (both build.xml and pom.xml) from SNAPSHOT to RELEASE -->
  <target name="maven-stage" depends="test,maven-jar" description="deploy release version to Maven staging repository">
    <!-- sign and deploy the main artifact -->
    <artifact:mvn mavenHome="${maven.home}" fork="yes">
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${maven-staging-repository-url}" />
      <arg value="-DrepositoryId=${maven-staging-repository-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${maven-jar}" />
      <arg value="-Pgpg" />
      <arg value="-e" />
    </artifact:mvn>

    <!-- sign and deploy the sources artifact -->
    <artifact:mvn mavenHome="${maven.home}" fork="yes">
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${maven-staging-repository-url}" />
      <arg value="-DrepositoryId=${maven-staging-repository-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${maven-sources-jar}" />
      <arg value="-Dclassifier=sources" />
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- sign and deploy the javadoc artifact -->
    <artifact:mvn mavenHome="${maven.home}" fork="yes">
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${maven-staging-repository-url}" />
      <arg value="-DrepositoryId=${maven-staging-repository-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${maven-javadoc-jar}" />
      <arg value="-Dclassifier=javadoc" />
      <arg value="-Pgpg" />
    </artifact:mvn>
  </target>

  <target name="clean">
    <delete dir="${build}" />
  </target>

  <target name="tag-version" description="Tags the current version in the javadoc">
    <replaceregexp byline="true">
      <regexp pattern="@version[\s]*.*$" />
      <substitution expression="@version ${version}" />
      <fileset dir="${src}">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="${test.src}">
        <include name="**/*.java" />
      </fileset>
    </replaceregexp>
    <replaceregexp byline="true">
      <regexp pattern="@since[\s]*$" />
      <substitution expression="@since ${version}" />
      <fileset dir="${src}">
        <include name="**/*.java" />
      </fileset>
      <fileset dir="${test.src}">
        <include name="**/*.java" />
      </fileset>
    </replaceregexp>
  </target>

  <target name="docs">
    <javadoc packagenames="com.j2speed.*" sourcepath="${src}" classpathref="project.classpath" defaultexcludes="yes" destdir="${build}/javadoc" author="true" version="true" use="true" windowtitle="Accessive Framework">
      <doctitle>
        <![CDATA[<h1>J2Exec Framework</h1>]]></doctitle>
    <bottom>
      <![CDATA[<i>Copyright &#169; 2011 J2Speed. All rights reserved.</i>]]></bottom>
</javadoc>
</target>

</project>